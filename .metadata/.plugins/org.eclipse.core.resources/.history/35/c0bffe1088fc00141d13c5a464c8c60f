package org.cache.framework;

import static org.junit.Assert.fail;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.junit.Test;

public class CacheTest {

	@Test
	public void testMap() throws Throwable {
		Map<Integer, Integer> map = new HashMap<Integer, Integer>(2);
		map.put(1, 1);
		map.put(2, 2);
		printMap(map);
		map.put(3, 3);
		
	}

	private <K, V> void printMap(Map<K, V> map) {
		for (Iterator<K> it = map.keySet().iterator(); it.hasNext();) {
			K key = it.next();
			System.out.println("key is : " + key + "; and value is : "
					+ map.get(key));
		}
	}

	@Test
	public void testSize() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetDefaultExpire() {
		fail("Not yet implemented");
	}

	@Test
	public void testPutKV() {
		fail("Not yet implemented");
	}

	@Test
	public void testPutKVLong() {
		fail("Not yet implemented");
	}

	@Test
	public void testGet() {
		fail("Not yet implemented");
	}

	@Test
	public void testEliminate() {
		fail("Not yet implemented");
	}

	@Test
	public void testIsFull() {
		fail("Not yet implemented");
	}

	@Test
	public void testRemove() {
		fail("Not yet implemented");
	}

	@Test
	public void testClear() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetCacheSize() {
		fail("Not yet implemented");
	}

	@Test
	public void testIsEmpty() {
		fail("Not yet implemented");
	}

	@Test
	public void testContainsKey() {
		fail("Not yet implemented");
	}

}
